#!/usr/bin/env node

const {fork} = require('child_process')
const {join} = require('path')

const Database = require('better-sqlite3')
const yargs = require("yargs");

const runModule = join(__dirname, './run')

const {targetMap, rerunChooser} = yargs.command(
  '$0 [targetMap]',
  'Rerun Chooser, Assigner, and ConflationMap for the targetMap',
  (yargs) => {
    yargs
      .positional('targetMap', {
        describe: 'The TargetMap for which to re-run the conflation. If not specified, conflation is rerun for both.',
        type: 'string',
        demand: false,
        choices: ['nys_ris', 'npmrds']
      })
      .option('rerunChooser', {
        describe: 'Rerun the TargetMap conflation chooser step',
        type: 'boolean',
        demand: false,
        default: false,
      })
    // TODO: Add automation of NysRis and NPMRDS MBTiles generation.
    // .option('skipCreateNysRisMBtiles', {
    //   describe: 'Skip creating the NYS RIS TargetMap MBTiles',
    //   type: 'boolean',
    //   demand: false,
    //   default: false,
    // })
    // .option('skipCreateNpmrdsMBtiles', {
    //   describe: 'Skip creating the NPMRDS TargetMap MBTiles',
    //   type: 'boolean',
    //   demand: false,
    //   default: false,
    // })
  }
)
  .help()
  .strict()
  .wrap(72)
  .argv

const targetMaps = targetMap ? [targetMap] : ['nys_ris', 'npmrds']

function resetTargetMapDatabaseTables(tgtMap) {
  const targetMapBlkBrdDbPath = join(__dirname, './output/sqlite/', `${tgtMap}_conflation_blackboard`)

  const db = new Database(':memory:');

  console.log()
  console.log(`=== clear the ${tgtMap} database tables ===`)

  const dropChosenMatches = rerunChooser
    ? 'DROP TABLE IF EXISTS target_map_bb.target_map_edge_chosen_matches ;'
    : ''

  db.exec(`
    BEGIN;

    ATTACH '${targetMapBlkBrdDbPath}' AS target_map_bb;

    ${dropChosenMatches}
    DROP TABLE IF EXISTS target_map_bb.target_map_edge_assigned_matches ;

    COMMIT;
  `);
}

function rerunConflationSteps(tgtMap) {
  console.log()
  console.log(`=== re-run${rerunChooser ? ' chooser and' : ''} assigner for ${tgtMap} ===`)

  return new Promise((resolve, reject) =>
    fork(runModule, [`${tgtMap}_shst_match`])
      .on('exit', resolve)
      .on('error', reject)
  )
}

function resetConflationMapDatabaseTables() {
  const conflationMapDbPath = join(__dirname, './output/sqlite/conflation_map')

  const db = new Database(':memory:');

  db.exec(`
    BEGIN;

    ATTACH '${conflationMapDbPath}' AS conflation_map;

    DROP TABLE IF EXISTS conflation_map.target_maps_assigned_matches ;
    DROP TABLE IF EXISTS conflation_map.conflation_map ;
    DROP TABLE IF EXISTS conflation_map.qa_npmrds_lengths ;
    DROP TABLE IF EXISTS conflation_map.qa_nys_ris_lengths ;

    COMMIT;
  `);
}

async function recreateConflationMapDatabaseTables() {
  console.log()
  console.log('=== recreate the conflation map database tables ===')

  return new Promise((resolve, reject) =>
    fork(runModule, ['initialize_conflation_map_database'])
      .on('exit', resolve)
      .on('error', reject)
  )
}

async function recreateConflationMapMBTiles() {
  console.log()
  console.log('=== recreate the conflation map mbtiles ===')

  return new Promise((resolve, reject) =>
    fork(runModule, ['output_conflation_map_qa_mbtiles'])
      .on('exit', resolve)
      .on('error', reject)
  )
}


(async () => {
  for (const tgtMap of targetMaps) {
    resetTargetMapDatabaseTables(tgtMap)
    await rerunConflationSteps(tgtMap)
  }

  resetConflationMapDatabaseTables()
  await recreateConflationMapDatabaseTables()
  await recreateConflationMapMBTiles()
})()
