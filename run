#!/usr/bin/env node

/* eslint-disable no-unused-expressions, jsdoc/require-jsdoc */

const { join } = require('path');

const yargs = require('yargs');

// https://www.npmjs.com/package/ts-node#programmatic
//   You can require ts-node and register the loader for future requires by using
//     require('ts-node').register({ /* options */ }).
// https://www.npmjs.com/package/ts-node#options-via-tsconfigjson
//   Most options can be specified by a "ts-node" object in tsconfig.json using
//   their programmatic, camelCase names.
require('ts-node').register();

const defaultInputDir = join(__dirname, './input');
const defaultOutputDir = join(__dirname, './output');

// SharedStreets Source Maps
const SourceMapCommands = require('./src/daos/SourceMapDao/cli/yargs_wrapper');

const OsmCommands = require('./src/daos/OpenStreetMapDao/cli/yargs_wrapper');
const NpmrdsCommands = require('./src/daos/NpmrdsDAO/cli/yarg_wrapper');
const NysRisCommands = require('./src/daos/NysRisDAO/cli/yargs_wrapper');
const ConflationMapCommands = require('./src/daos/ConflationMapDAO/cli');

const RawGtfsCommands = require('./src/daos/GtfsDAO/raw_gtfs_layer/cli/yargs_wrapper');

const taskCommands = yargs
  .parserConfiguration({
    'camel-case-expansion': false,
    'flatten-duplicate-arrays': false,
  })
  .epilogue(
    `The default input directory ${defaultInputDir} can be overrode using the AVAIL_MAP_CONFLATION_INPUT_DIR env variable. The default output directory ${defaultOutputDir} can be overrode using the AVAIL_MAP_CONFLATION_OUTPUT_DIR env variable.`,
  );

Object.keys(OsmCommands).forEach((cmd) => {
  taskCommands.command(OsmCommands[cmd]);
});

Object.keys(SourceMapCommands).forEach((cmd) => {
  taskCommands.command(SourceMapCommands[cmd]);
});

Object.keys(NpmrdsCommands).forEach((cmd) => {
  taskCommands.command(NpmrdsCommands[cmd]);
});

Object.keys(NysRisCommands).forEach((cmd) => {
  taskCommands.command(NysRisCommands[cmd]);
});

Object.keys(ConflationMapCommands).forEach((cmd) => {
  taskCommands.command(ConflationMapCommands[cmd]);
});

Object.keys(RawGtfsCommands).forEach((cmd) => {
  taskCommands.command(RawGtfsCommands[cmd]);
});

taskCommands
  .demandCommand()
  .recommendCommands()
  .strict()
  .wrap(yargs.terminalWidth() / 1.618).argv;
