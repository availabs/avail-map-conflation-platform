#!/usr/bin/env node

/* eslint-disable no-unused-expressions, jsdoc/require-jsdoc */

const {join} = require("path");

const yargs = require("yargs");

// https://www.npmjs.com/package/ts-node#programmatic
//   You can require ts-node and register the loader for future requires by using
//     require('ts-node').register({ /* options */ }).
// https://www.npmjs.com/package/ts-node#options-via-tsconfigjson
//   Most options can be specified by a "ts-node" object in tsconfig.json using
//   their programmatic, camelCase names.
require('ts-node').register()

// SharedStreets Source Maps
const source_map_load = require('./src/pipeline_transforms/source_map_load/yargs_wrapper')
const {outputSourceMapShapefile} = require('./src/daos/SourceMapDao/outputShapefile/yargs_wrapper')


const OsmCommands = require("./src/daos/OpenStreetMapDao/cli/yargs_wrapper")
const NpmrdsCommands = require("./src/daos/NpmrdsDAO/cli/yarg_wrapper")
const NysRisCommands = require('./src/daos/NysRisDAO/cli/yargs_wrapper');
const ConflationMapCommands = require("./src/daos/ConflationMapDAO/cli")

// GTFS
const raw_gtfs_into_sqlite = require("./src/pipeline_transforms/raw_gtfs_into_sqlite/yargs_wrapper");
const gtfs_as_geojson = require("./src/pipeline_transforms/gtfs_as_geojson/yargs_wrapper");
const gtfs_network = require("./src/pipeline_transforms/gtfs_network/yargs_wrapper");
const gtfs_osm_network = require("./src/pipeline_transforms/gtfs_osm_network/yargs_wrapper");
const scheduled_bus_traffic = require("./src/pipeline_transforms/scheduled_bus_traffic/yargs_wrapper");
const gtfs_conflation_map_join = require("./src/pipeline_transforms/gtfs_conflation_map_join/yargs_wrapper");
const gtfs_conflation_schedule_join = require("./src/pipeline_transforms/gtfs_conflation_schedule_join/yargs_wrapper");

const output = require("./src/pipeline_transforms/output/yargs_wrapper");

const taskCommands = yargs
  .parserConfiguration({
    "camel-case-expansion": false,
    "flatten-duplicate-arrays": false,
  })
  .option({
    output_dir: {
      type: "string",
      desc:
        "Path to the output directory. (Can be set using ENV variable AVL_GTFS_CONFLATION_OUTPUT_DIR.)",
      default:
        process.env.AVL_GTFS_CONFLATION_OUTPUT_DIR ||
        join(process.cwd(), "output"),
    },
  })
  .command(source_map_load)
  .command(outputSourceMapShapefile)
  .command(raw_gtfs_into_sqlite)
  .command(gtfs_as_geojson)
  .command(gtfs_network)
  .command(gtfs_osm_network)
  .command(scheduled_bus_traffic)
  .command(gtfs_conflation_map_join)
  .command(gtfs_conflation_schedule_join)
  .command(output);

Object.keys(OsmCommands).forEach(cmd => {
  taskCommands.command(OsmCommands[cmd])
})

Object.keys(NpmrdsCommands).forEach(cmd => {
  taskCommands.command(NpmrdsCommands[cmd])
})

Object.keys(NysRisCommands).forEach(cmd => {
  taskCommands.command(NysRisCommands[cmd])
})

Object.keys(ConflationMapCommands).forEach(cmd => {
  taskCommands.command(ConflationMapCommands[cmd])
})

taskCommands
  .demandCommand()
  .recommendCommands()
  .strict()
  .wrap(yargs.terminalWidth() / 1.618).argv;
